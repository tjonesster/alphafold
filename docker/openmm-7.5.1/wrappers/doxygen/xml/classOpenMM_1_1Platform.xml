<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classOpenMM_1_1Platform" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>OpenMM::Platform</compoundname>
    <includes refid="Platform_8h" local="no">Platform.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1Platform_1a7faee1aad165aacd94e5caab0a4beeb7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; OpenMM::Platform::platformProperties</definition>
        <argsstring></argsstring>
        <name>platformProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="251" column="17" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1Platform_1a621253ebd04846604f019dd5be655257" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; OpenMM::Platform::deprecatedPropertyReplacements</definition>
        <argsstring></argsstring>
        <name>deprecatedPropertyReplacements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="252" column="14" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ContextImpl</definition>
        <argsstring></argsstring>
        <name>ContextImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="254" column="5" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1Platform_1abe1ddd7ba471bb5b6aee59efab2f4c97" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, KernelFactory * &gt;</type>
        <definition>std::map&lt;std::string, KernelFactory*&gt; OpenMM::Platform::kernelFactories</definition>
        <argsstring></argsstring>
        <name>kernelFactories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="255" column="14" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1Platform_1ab2b309d9a8bc69508049e548a675b07c" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; OpenMM::Platform::defaultProperties</definition>
        <argsstring></argsstring>
        <name>defaultProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="256" column="14" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1Platform_1a54e866c3969153e4f4ee884530f89923" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; OpenMM::Platform::pluginLoadFailures</definition>
        <argsstring></argsstring>
        <name>pluginLoadFailures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="258" column="24" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1Platform_1adef1f6cd588c32421605dc1a6304d969" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual OpenMM::Platform::~Platform</definition>
        <argsstring>()</argsstring>
        <name>~Platform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="66" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1af949e0f0e28eb3de54f8e14e609a6f61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::string &amp;</type>
        <definition>virtual const std::string&amp; OpenMM::Platform::getName</definition>
        <argsstring>() const =0</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of this platform. This should be a unique identifier which can be used to recognized it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="70" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a9573a348c54a0e1eef72a351e8cf82f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double OpenMM::Platform::getSpeed</definition>
        <argsstring>() const =0</argsstring>
        <name>getSpeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an estimate of how fast this <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> class is. This need not be precise. It only is expected to return an order or magnitude estimate of the relative performance of different <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> classes. An unoptimized reference implementation should return 1.0, and all other Platforms should return a larger value that is an estimate of how many times faster they are than the reference implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="77" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a71c79bfcaf2210750ff3fd6968022adb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool OpenMM::Platform::supportsDoublePrecision</definition>
        <argsstring>() const =0</argsstring>
        <name>supportsDoublePrecision</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether this <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> supports double precision arithmetic. If this returns false, the platform is permitted to represent double precision values internally as single precision.</para>
<para><xrefsect id="deprecated_1_deprecated000025"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method is not well defined, and is too simplistic to describe the actual behavior of some Platforms, such as ones that offer multiple precision modes. It will be removed in a future release. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="85" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a667bf989506112dc4bacd6c7427f8c71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt;std::string&gt;&amp; OpenMM::Platform::getPropertyNames</definition>
        <argsstring>() const</argsstring>
        <name>getPropertyNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the names of all Platform-specific properties this <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="89" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a7fc583ff6548c80fdcfbcfded91255a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>virtual const std::string&amp; OpenMM::Platform::getPropertyValue</definition>
        <argsstring>(const Context &amp;context, const std::string &amp;property) const</argsstring>
        <name>getPropertyValue</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of a Platform-specific property for a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> for which to get the property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="97" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a1c7272cd98adc272c81d2e4fc8fb0169" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void OpenMM::Platform::setPropertyValue</definition>
        <argsstring>(Context &amp;context, const std::string &amp;property, const std::string &amp;value) const</argsstring>
        <name>setPropertyValue</name>
        <param>
          <type><ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a Platform-specific property for a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> for which to set the property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="105" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a52707a037452ba774a90231b01d6f216" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; OpenMM::Platform::getPropertyDefaultValue</definition>
        <argsstring>(const std::string &amp;property) const</argsstring>
        <name>getPropertyDefaultValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default value of a Platform-specific property. This is the value that will be used for newly created Contexts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the default value of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="113" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1adb84c0d257d1bdbc1adbe84d66be46ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::Platform::setPropertyDefaultValue</definition>
        <argsstring>(const std::string &amp;property, const std::string &amp;value)</argsstring>
        <name>setPropertyDefaultValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default value of a Platform-specific property. This is the value that will be used for newly created Contexts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1af8eea6a21e66b5b6e97b2097d62a6960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void OpenMM::Platform::contextCreated</definition>
        <argsstring>(ContextImpl &amp;context, const std::map&lt; std::string, std::string &gt; &amp;properties) const</argsstring>
        <name>contextCreated</name>
        <param>
          <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called whenever a new <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created. It gives the <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> a chance to initialize the context and store platform-specific data in it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the newly created context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of values for platform-specific properties. Keys are the property names. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="129" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1aea27530de21efd1d4b46b1a5f0a29599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void OpenMM::Platform::linkedContextCreated</definition>
        <argsstring>(ContextImpl &amp;context, ContextImpl &amp;originalContext) const</argsstring>
        <name>linkedContextCreated</name>
        <param>
          <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
          <declname>originalContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called whenever a new <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is created using ContextImpl::createLinkedContext(). It gives the <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> a chance to initialize the context and store platform-specific data in it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the newly created context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalContext</parametername>
</parameternamelist>
<parameterdescription>
<para>the original context it is linked to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="137" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1aa19dc8133aa2f225c0819a4c1c4f5c04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void OpenMM::Platform::contextDestroyed</definition>
        <argsstring>(ContextImpl &amp;context) const</argsstring>
        <name>contextDestroyed</name>
        <param>
          <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called whenever a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> is deleted. It gives the <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> a chance to clean up any platform-specific data that was stored in it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="142" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1ac19d8e9d4ab81b7872a420fc8e86ef33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::Platform::registerKernelFactory</definition>
        <argsstring>(const std::string &amp;name, KernelFactory *factory)</argsstring>
        <name>registerKernelFactory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>KernelFactory *</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a KernelFactory which should be used to create Kernels with a particular name. The <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> takes over ownership of the factory, and will delete it when the <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> itself is deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel name for which the factory should be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factory</parametername>
</parameternamelist>
<parameterdescription>
<para>the factory to use for creating Kernels with the specified name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="151" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1aa3a5ac337eeb856a1dd485c20d236168" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::Platform::supportsKernels</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;kernelNames) const</argsstring>
        <name>supportsKernels</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>kernelNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether this Platforms provides implementations of a set of kernels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kernelNames</parametername>
</parameternamelist>
<parameterdescription>
<para>the names of the kernels of interests </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> provides implementations of all the kernels in the list, false if there are any which it does not support </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="159" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a60b73b7347d296b8817d6b42de4b0182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Kernel</type>
        <definition>Kernel OpenMM::Platform::createKernel</definition>
        <argsstring>(const std::string &amp;name, ContextImpl &amp;context) const</argsstring>
        <name>createKernel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a Kernel object. If you call this method multiple times for different contexts with the same name, the returned Kernels are independent and do not interact with each other. This means that it is possible to have multiple simulations in progress at one time without them interfering.</para>
<para>If no KernelFactory has been registered for the specified name, this will throw an exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the Kernel to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>the context for which to create a Kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly created Kernel object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="172" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOpenMM_1_1Platform_1af35ac7af85c11c174c761526cfbff295" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenMM::Platform::registerPlatform</definition>
        <argsstring>(Platform *platform)</argsstring>
        <name>registerPlatform</name>
        <param>
          <type><ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> *</type>
          <declname>platform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="176" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a9c45305f500a1369f88fd9c1da9a852e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int OpenMM::Platform::getNumPlatforms</definition>
        <argsstring>()</argsstring>
        <name>getNumPlatforms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of Platforms that have been registered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="180" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a6f0e1fada5628b19932cf5cb32531974" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> &amp;</type>
        <definition>static Platform&amp; OpenMM::Platform::getPlatform</definition>
        <argsstring>(int index)</argsstring>
        <name>getPlatform</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a registered <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> by index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="184" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a2462480f7de79dd4a8dd88d0ec252fdc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; OpenMM::Platform::getPluginLoadFailures</definition>
        <argsstring>()</argsstring>
        <name>getPluginLoadFailures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get any failures caused during the last call to loadPluginsFromDirectory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="188" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a879cf1a1e4084fd4d6d53f4877cb1975" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> &amp;</type>
        <definition>static Platform&amp; OpenMM::Platform::getPlatformByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getPlatformByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the registered <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> with a particular name. If no <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> with that name has been registered, this throws an exception. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="193" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a6222f62303c24450ae5ae1f1dc42dade" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> &amp;</type>
        <definition>static Platform&amp; OpenMM::Platform::findPlatform</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;kernelNames)</argsstring>
        <name>findPlatform</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>kernelNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> which can be used to perform a calculation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kernelNames</parametername>
</parameternamelist>
<parameterdescription>
<para>the names of all kernels which will be needed for the calculation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the fastest registered <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> which supports all of the requested kernels. If no <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> exists which supports all of them, this will throw an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="201" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1aa9be49ccec8d336085a291d16fd4c507" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenMM::Platform::loadPluginLibrary</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>loadPluginLibrary</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a dynamic library (DLL) which contains an <ref refid="namespaceOpenMM" kindref="compound">OpenMM</ref> plugin. Typically, each <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> is distributed as a separate dynamic library. This method can then be called at runtime to load each available library. Each library should contain an initializer function to register any Platforms and KernelFactories that it contains.</para>
<para>If the file does not exist or cannot be loaded, an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the dynamic library file. This is interpreted using the operating system&apos;s rules for loading libraries. Typically it may be either an absolute path or relative to a set of standard locations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="214" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1ac6cecbc3b5962f49e5125358f5f6de02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; OpenMM::Platform::loadPluginsFromDirectory</definition>
        <argsstring>(const std::string &amp;directory)</argsstring>
        <name>loadPluginsFromDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load multiple dynamic libraries (DLLs) which contain <ref refid="namespaceOpenMM" kindref="compound">OpenMM</ref> plugins from one or more directories. Multiple fully-qualified paths can be joined together with &apos;:&apos; on unix-like systems (or &apos;;&apos; on windows-like systems); each will be searched for plugins, in-order. For example, &apos;/foo/plugins:/bar/plugins&apos; will search both <computeroutput>/foo/plugins</computeroutput> and <computeroutput>/bar/plugins</computeroutput>. If an identically-named plugin is encountered twice it will be loaded at both points; be careful!!!</para>
<para>This method loops over every file contained in the specified directories and calls <ref refid="classOpenMM_1_1Platform_1aa9be49ccec8d336085a291d16fd4c507" kindref="member">loadPluginLibrary()</ref> for each one. If an error occurs while trying to load a particular file, that file is simply ignored. You can retrieve a list of all such errors by calling <ref refid="classOpenMM_1_1Platform_1a2462480f7de79dd4a8dd88d0ec252fdc" kindref="member">getPluginLoadFailures()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;:&apos; (unix) or &apos;;&apos; (windows) deliminated list of paths containing libraries to load </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the names of all files which were successfully loaded as libraries </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="229" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a21bd6cde6b300c8f3af9e36304f2ab64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>static const std::string&amp; OpenMM::Platform::getDefaultPluginsDirectory</definition>
        <argsstring>()</argsstring>
        <name>getDefaultPluginsDirectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default directory from which to load plugins. If the environment variable OPENMM_PLUGIN_DIR is set, this returns its value. Otherwise, it returns a platform specific default location.</para>
<para><simplesect kind="return"><para>the path to the default plugin directory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="237" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a9f71cb138d2c7f89922b0663af70a608" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>static const std::string&amp; OpenMM::Platform::getOpenMMVersion</definition>
        <argsstring>()</argsstring>
        <name>getOpenMMVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a string containing the version number of the <ref refid="namespaceOpenMM" kindref="compound">OpenMM</ref> library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="241" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenMM_1_1Platform_1acbcfc27cecc3485ffc48ad33f6e25564" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
        <definition>ContextImpl&amp; OpenMM::Platform::getContextImpl</definition>
        <argsstring>(Context &amp;context) const</argsstring>
        <name>getContextImpl</name>
        <param>
          <type><ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ContextImpl for a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="246" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1Platform_1a953a7e2f469373db0a743abe54642b17" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" kindref="member">ContextImpl</ref> &amp;</type>
        <definition>const ContextImpl&amp; OpenMM::Platform::getContextImpl</definition>
        <argsstring>(const Context &amp;context) const</argsstring>
        <name>getContextImpl</name>
        <param>
          <type>const <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ContextImpl for a <ref refid="classOpenMM_1_1Context" kindref="compound">Context</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="250" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classOpenMM_1_1Platform_1accbe49ab24f55a76897f8faa0db885a2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> * &gt; &amp;</type>
        <definition>static std::vector&lt;Platform*&gt;&amp; OpenMM::Platform::getPlatforms</definition>
        <argsstring>()</argsstring>
        <name>getPlatforms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="257" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> defines an implementation of all the kernels needed to perform some calculation. More precisely, a <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> object acts as a registry for a set of KernelFactory objects which together implement the kernels. The <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> class, in turn, provides a static registry of all available <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> objects.</para>
<para>To get a <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> object, call</para>
<para><preformatted>
<ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref>&amp; platform = Platform::findPlatform(kernelNames);
</preformatted></para>
<para>passing in the names of all kernels that will be required for the calculation you plan to perform. It will return the fastest available <ref refid="classOpenMM_1_1Platform" kindref="compound">Platform</ref> which provides implementations of all the specified kernels. You can then call <ref refid="classOpenMM_1_1Platform_1a60b73b7347d296b8817d6b42de4b0182" kindref="member">createKernel()</ref> to construct particular kernels as needed. </para>
    </detaileddescription>
    <location file="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" line="64" column="15" bodyfile="/home/taylorjones/Documents/alphafold/docker/openmm-7.5.1/olla/include/openmm/Platform.h" bodystart="64" bodyend="259"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1Platform_1af8eea6a21e66b5b6e97b2097d62a6960" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>contextCreated</name></member>
      <member refid="classOpenMM_1_1Platform_1aa19dc8133aa2f225c0819a4c1c4f5c04" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>contextDestroyed</name></member>
      <member refid="classOpenMM_1_1Platform_1a7e2f3e20ff3f49ee3b9c0e529422b663" prot="private" virt="non-virtual"><scope>OpenMM::Platform</scope><name>ContextImpl</name></member>
      <member refid="classOpenMM_1_1Platform_1a60b73b7347d296b8817d6b42de4b0182" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>createKernel</name></member>
      <member refid="classOpenMM_1_1Platform_1ab2b309d9a8bc69508049e548a675b07c" prot="private" virt="non-virtual"><scope>OpenMM::Platform</scope><name>defaultProperties</name></member>
      <member refid="classOpenMM_1_1Platform_1a621253ebd04846604f019dd5be655257" prot="protected" virt="non-virtual"><scope>OpenMM::Platform</scope><name>deprecatedPropertyReplacements</name></member>
      <member refid="classOpenMM_1_1Platform_1a6222f62303c24450ae5ae1f1dc42dade" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>findPlatform</name></member>
      <member refid="classOpenMM_1_1Platform_1acbcfc27cecc3485ffc48ad33f6e25564" prot="protected" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getContextImpl</name></member>
      <member refid="classOpenMM_1_1Platform_1a953a7e2f469373db0a743abe54642b17" prot="protected" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getContextImpl</name></member>
      <member refid="classOpenMM_1_1Platform_1a21bd6cde6b300c8f3af9e36304f2ab64" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getDefaultPluginsDirectory</name></member>
      <member refid="classOpenMM_1_1Platform_1af949e0f0e28eb3de54f8e14e609a6f61" prot="public" virt="pure-virtual"><scope>OpenMM::Platform</scope><name>getName</name></member>
      <member refid="classOpenMM_1_1Platform_1a9c45305f500a1369f88fd9c1da9a852e" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getNumPlatforms</name></member>
      <member refid="classOpenMM_1_1Platform_1a9f71cb138d2c7f89922b0663af70a608" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getOpenMMVersion</name></member>
      <member refid="classOpenMM_1_1Platform_1a6f0e1fada5628b19932cf5cb32531974" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPlatform</name></member>
      <member refid="classOpenMM_1_1Platform_1a879cf1a1e4084fd4d6d53f4877cb1975" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPlatformByName</name></member>
      <member refid="classOpenMM_1_1Platform_1accbe49ab24f55a76897f8faa0db885a2" prot="private" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPlatforms</name></member>
      <member refid="classOpenMM_1_1Platform_1a2462480f7de79dd4a8dd88d0ec252fdc" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPluginLoadFailures</name></member>
      <member refid="classOpenMM_1_1Platform_1a52707a037452ba774a90231b01d6f216" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPropertyDefaultValue</name></member>
      <member refid="classOpenMM_1_1Platform_1a667bf989506112dc4bacd6c7427f8c71" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>getPropertyNames</name></member>
      <member refid="classOpenMM_1_1Platform_1a7fc583ff6548c80fdcfbcfded91255a8" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>getPropertyValue</name></member>
      <member refid="classOpenMM_1_1Platform_1a9573a348c54a0e1eef72a351e8cf82f5" prot="public" virt="pure-virtual"><scope>OpenMM::Platform</scope><name>getSpeed</name></member>
      <member refid="classOpenMM_1_1Platform_1abe1ddd7ba471bb5b6aee59efab2f4c97" prot="private" virt="non-virtual"><scope>OpenMM::Platform</scope><name>kernelFactories</name></member>
      <member refid="classOpenMM_1_1Platform_1aea27530de21efd1d4b46b1a5f0a29599" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>linkedContextCreated</name></member>
      <member refid="classOpenMM_1_1Platform_1aa9be49ccec8d336085a291d16fd4c507" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>loadPluginLibrary</name></member>
      <member refid="classOpenMM_1_1Platform_1ac6cecbc3b5962f49e5125358f5f6de02" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>loadPluginsFromDirectory</name></member>
      <member refid="classOpenMM_1_1Platform_1a7faee1aad165aacd94e5caab0a4beeb7" prot="protected" virt="non-virtual"><scope>OpenMM::Platform</scope><name>platformProperties</name></member>
      <member refid="classOpenMM_1_1Platform_1a54e866c3969153e4f4ee884530f89923" prot="private" virt="non-virtual"><scope>OpenMM::Platform</scope><name>pluginLoadFailures</name></member>
      <member refid="classOpenMM_1_1Platform_1ac19d8e9d4ab81b7872a420fc8e86ef33" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>registerKernelFactory</name></member>
      <member refid="classOpenMM_1_1Platform_1af35ac7af85c11c174c761526cfbff295" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>registerPlatform</name></member>
      <member refid="classOpenMM_1_1Platform_1adb84c0d257d1bdbc1adbe84d66be46ee" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>setPropertyDefaultValue</name></member>
      <member refid="classOpenMM_1_1Platform_1a1c7272cd98adc272c81d2e4fc8fb0169" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>setPropertyValue</name></member>
      <member refid="classOpenMM_1_1Platform_1a71c79bfcaf2210750ff3fd6968022adb" prot="public" virt="pure-virtual"><scope>OpenMM::Platform</scope><name>supportsDoublePrecision</name></member>
      <member refid="classOpenMM_1_1Platform_1aa3a5ac337eeb856a1dd485c20d236168" prot="public" virt="non-virtual"><scope>OpenMM::Platform</scope><name>supportsKernels</name></member>
      <member refid="classOpenMM_1_1Platform_1adef1f6cd588c32421605dc1a6304d969" prot="public" virt="virtual"><scope>OpenMM::Platform</scope><name>~Platform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
